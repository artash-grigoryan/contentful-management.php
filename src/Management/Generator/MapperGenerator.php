<?php

/**
 * This file is part of the contentful-management.php package.
 *
 * @copyright 2015-2017 Contentful GmbH
 * @license   MIT
 */

namespace Contentful\Management\Generator;

use Contentful\Link;
use Contentful\Management\ApiDateTime;
use Contentful\Management\Mapper\BaseMapper;
use Contentful\Management\Resource\ContentType;
use Contentful\Management\Resource\ContentType\Field\ArrayField;
use Contentful\Management\Resource\ContentType\Field\DateField;
use Contentful\Management\Resource\ContentType\Field\FieldInterface;
use Contentful\Management\Resource\ContentType\Field\LinkField;
use Contentful\Management\SystemProperties;
use PhpParser\Comment;
use PhpParser\Node;
use PhpParser\Node\Stmt\Class_;
use PhpParser\Node\Stmt\ClassMethod;

/**
 * MapperGenerator class.
 */
class MapperGenerator extends BaseGenerator
{
    /**
     * @var array
     */
    private $uses = [];

    /**
     * Restore the uses array to default values.
     */
    private function setDefaultUses()
    {
        $this->uses = [
            'link' => false,
            'date' => false,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function generate(ContentType $contentType, string $namespace): string
    {
        $this->setDefaultUses();

        $className = $this->convertToStudlyCaps($contentType->getId());

        $class = $this->generateClass($contentType);

        $stmts = $this->generateUses([
            $namespace.'\\'.$className,
            BaseMapper::class,
            SystemProperties::class,
            $this->uses['date'] ? ApiDateTime::class : null,
            $this->uses['link'] ? Link::class : null,
        ]);

        $stmts[] = $class;

        return $this->render(
            new Node\Stmt\Namespace_(new Node\Name($namespace.'\\Mapper'), $stmts)
        );
    }

    /**
     * @param ContentType $contentType
     *
     * @return Class_
     */
    private function generateClass(ContentType $contentType): Class_
    {
        $className = $this->convertToStudlyCaps($contentType->getId());

        $class = new Node\Stmt\Class_($className.'Mapper', ['extends' => new Node\Name('BaseMapper')], [
            'comments' => [
                new Comment(\sprintf(
                    '
/**
                     * %sMapper class.
                     *
                     * This class was autogenerated.
                     */',
                    $className
                )),
            ],
        ]);

        $class->stmts[] = $this->generateMapMethod($contentType);
        $class->stmts[] = $this->generateFormatMethod($contentType);

        return $class;
    }

    /**
     * @param ContentType $contentType
     *
     * @return ClassMethod
     */
    private function generateMapMethod(ContentType $contentType): ClassMethod
    {
        $className = $this->convertToStudlyCaps($contentType->getId());

        return new ClassMethod(
            'map',
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PUBLIC,
                'returnType' => new Node\Name($className),
                'stmts' => [
                    new Node\Stmt\Return_(
                        new Node\Expr\MethodCall(
                            new Node\Expr\Variable('this'),
                            'hydrate',
                            [
                                new Node\Arg(new Node\Expr\BinaryOp\Coalesce(
                                    new Node\Expr\Variable('resource'),
                                    new Node\Expr\ClassConstFetch(new Node\Name($className), 'class')
                                )),
                                new Node\Expr\Array_([
                                    new Node\Expr\ArrayItem(
                                        new Node\Expr\New_(new Node\Name('SystemProperties'), [
                                            new Node\Arg(new Node\Expr\ArrayDimFetch(
                                                new Node\Expr\Variable('data'),
                                                new Node\Scalar\String_('sys')
                                            )),
                                        ]),
                                        new Node\Scalar\String_('sys')
                                    ),
                                    new Node\Expr\ArrayItem(
                                        new Node\Expr\MethodCall(
                                            new Node\Expr\Variable('this'),
                                            'formatFields',
                                            [
                                                new Node\Arg(new Node\Expr\BinaryOp\Coalesce(
                                                    new Node\Expr\ArrayDimFetch(
                                                        new Node\Expr\Variable('data'),
                                                        new Node\Scalar\String_('fields')
                                                    ),
                                                    new Node\Expr\Array_([])
                                                )),
                                            ]
                                        ),
                                        new Node\Scalar\String_('fields'),
                                        false,
                                        // This is actually a hack for forcing arrays
                                        // to be displayed on multiple lines. Oh, well...
                                        ['comments' => [new Comment('// Delegate the formatting of all fields')]]
                                    ),
                                ]),
                            ]
                        )
                    ),
                ],
                'params' => [
                    new Node\Param('resource'),
                    new Node\Param('data', null, 'array'),
                ],
            ],
            [
                'comments' => [
                    new Comment('/**
                        * {@inheritdoc}
                        */'),
                ],
            ]
        );
    }

    /**
     * @param ContentType $contentType
     *
     * @return ClassMethod
     */
    private function generateFormatMethod(ContentType $contentType): ClassMethod
    {
        $method = new ClassMethod(
            'formatFields',
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PRIVATE,
                'returnType' => new Node\Name('array'),
                'stmts' => [
                    new Node\Expr\Assign(
                            new Node\Expr\Variable('fields'),
                            new Node\Expr\Array_([])
                    ),
                ],
                'params' => [
                    new Node\Param('data', null, 'array'),
                ],
            ],
            [
                'comments' => [
                    new Comment('
/**
                        * @param array $data
                        *
                        * @return array
                        */'),
                ],
            ]
        );

        foreach ($contentType->getFields() as $field) {
            $method->stmts = \array_merge($method->stmts, $this->generateFieldAssignment($field));
        }

        $method->stmts[] = new Node\Stmt\Return_(
            new Node\Expr\Variable('fields'),
            ['comments' => [new Comment('')]]
        );

        return $method;
    }

    /**
     * @param FieldInterface $field
     *
     * @return Node\Expr[]
     */
    private function generateFieldAssignment(FieldInterface $field): array
    {
        switch ($field->getType()) {
            case 'Link':
                return $this->generateLinkFieldAssignment($field);
            case 'Array':
                if ($field->getItemsType() == 'Link') {
                    return $this->generateArrayLinkFieldAssignment($field);
                }

                return $this->generateDefaultFieldAssignment($field);
            case 'Date':
                return $this->generateDateFieldAssignment($field);
            default:
                return $this->generateDefaultFieldAssignment($field);
        }
    }

    /**
     * @param ArrayField $field
     *
     * @return Node\Expr[]
     */
    private function generateArrayLinkFieldAssignment(ArrayField $field): array
    {
        $this->uses['link'] = true;

        return $this->generateForeachAssignment($field, new Node\Expr\FuncCall(
            new Node\Name('array_map'),
            [
                new Node\Arg(
                    new Node\Expr\Closure([
                        'params' => [new Node\Param('link', null, 'array')],
                        'returnType' => new Node\Name('Link'),
                        'stmts' => [
                            new Node\Stmt\Return_($this->generateNewLinkStatement('link')),
                        ],
                    ])
                ),
                new Node\Arg(new Node\Expr\Variable('value')),
            ]
        ));
    }

    /**
     * @param LinkField $field
     *
     * @return Node\Expr[]
     */
    private function generateLinkFieldAssignment(LinkField $field): array
    {
        $this->uses['link'] = true;

        return $this->generateForeachAssignment(
            $field,
            $this->generateNewLinkStatement('value')
        );
    }

    /**
     * @param DateField $field
     *
     * @return Node\Expr[]
     */
    private function generateDateFieldAssignment(DateField $field): array
    {
        $this->uses['date'] = true;

        return $this->generateForeachAssignment(
            $field,
            new Node\Expr\New_(
                new Node\Name('ApiDateTime'),
                [new Node\Expr\Variable('value')]
            )
        );
    }

    /**
     * @param FieldInterface $field
     *
     * @return Node\Expr[]
     */
    private function generateDefaultFieldAssignment(FieldInterface $field): array
    {
        return [
            new Node\Expr\Assign(
                new Node\Expr\ArrayDimFetch(
                    new Node\Expr\Variable('fields'),
                    new Node\Scalar\String_($field->getId())
                ),
                new Node\Expr\BinaryOp\Coalesce(
                    new Node\Expr\ArrayDimFetch(
                        new Node\Expr\Variable('data'),
                        new Node\Scalar\String_($field->getId())
                    ),
                    new Node\Expr\ConstFetch(new Node\Name('null'))
                )
            ),
        ];
    }

    /**
     * @param string $varName
     *
     * @return Node\Expr\New_
     */
    private function generateNewLinkStatement(string $varName): Node\Expr\New_
    {
        return new Node\Expr\New_(
            new Node\Name('Link'),
            [
                new Node\Arg(
                    new Node\Expr\ArrayDimFetch(
                        new Node\Expr\ArrayDimFetch(
                            new Node\Expr\Variable($varName),
                            new Node\Scalar\String_('sys')
                        ),
                        new Node\Scalar\String_('id')
                    )
                ),
                new Node\Arg(
                    new Node\Expr\ArrayDimFetch(
                        new Node\Expr\ArrayDimFetch(
                            new Node\Expr\Variable($varName),
                            new Node\Scalar\String_('sys')
                        ),
                        new Node\Scalar\String_('linkType')
                    )
                ),
            ]
        );
    }

    /**
     * @param FieldInterface $field
     * @param Node\Expr      $expr
     *
     * @return Node\Stmt[]
     */
    private function generateForeachAssignment(FieldInterface $field, Node\Expr $expr): array
    {
        return [
            new Node\Expr\Assign(
                new Node\Expr\ArrayDimFetch(new Node\Expr\Variable('fields'), new Node\Scalar\String_($field->getId())),
                new Node\Expr\Array_([])
            ),
            new Node\Stmt\Foreach_(
                new Node\Expr\BinaryOp\Coalesce(
                    new Node\Expr\ArrayDimFetch(new Node\Expr\Variable('data'), new Node\Scalar\String_($field->getId())),
                    new Node\Expr\Array_([])
                ),
                new Node\Expr\Variable('value'),
                [
                    'keyVar' => new Node\Expr\Variable('locale'),
                    'stmts' => [
                        new Node\Expr\Assign(
                            new Node\Expr\ArrayDimFetch(
                                new Node\Expr\ArrayDimFetch(new Node\Expr\Variable('fields'), new Node\Scalar\String_($field->getId())),
                                new Node\Expr\Variable('locale')
                            ),
                            $expr
                        ),
                    ],
                ]
            ),
        ];
    }
}
