<?php

/**
 * This file is part of the contentful-management.php package.
 *
 * @copyright 2015-2017 Contentful GmbH
 * @license   MIT
 */

namespace Contentful\Management\Generator;

use Contentful\Link;
use Contentful\Management\ApiDateTime;
use Contentful\Management\Resource\Asset;
use Contentful\Management\Resource\ContentType;
use Contentful\Management\Resource\ContentType\Field\ArrayField;
use Contentful\Management\Resource\ContentType\Field\FieldInterface;
use Contentful\Management\Resource\ContentType\Field\LinkField;
use Contentful\Management\Resource\ContentType\Validation\LinkContentTypeValidation;
use Contentful\Management\Resource\Entry;
use Contentful\Management\Resource\ResourceInterface;
use PhpParser\Comment;
use PhpParser\Node;
use PhpParser\Node\Stmt\Class_;
use PhpParser\Node\Stmt\ClassMethod;

/**
 * EntryGenerator class.
 */
class EntryGenerator extends BaseGenerator
{
    /**
     * @var array
     */
    private $uses = [];

    /**
     * Restore the uses array to default values.
     */
    private function setDefaultUses()
    {
        $this->uses = [
            'asset' => false,
            'resource_interface' => false,
            'link' => false,
            'date' => false,
        ];
    }

    /**
     * @param ContentType $contentType
     * @param string      $namespace
     *
     * @return string
     */
    public function generate(ContentType $contentType, string $namespace): string
    {
        $this->setDefaultUses();

        $class = $this->generateClass($contentType);

        $stmts = $this->generateUses([
            Entry::class,
            $this->uses['date'] ? ApiDateTime::class : null,
            $this->uses['asset'] ? Asset::class : null,
            $this->uses['link'] ? Link::class : null,
            $this->uses['resource_interface'] ? ResourceInterface::class : null,
        ]);

        $stmts[] = $class;

        return $this->render(
            new Node\Stmt\Namespace_(new Node\Name($namespace), $stmts)
        );
    }

    /**
     * @param ContentType $contentType
     *
     * @return Class_
     */
    private function generateClass(ContentType $contentType): Class_
    {
        $className = $this->convertToStudlyCaps($contentType->getId());

        $class = new Node\Stmt\Class_($className, ['extends' => new Node\Name('Entry')], [
            'comments' => [
                new Comment(\sprintf(
                    '
/**
                     * %s class.
                     *
                     * This class was autogenerated.
                     */',
                    $className
                )),
            ],
        ]);

        $class->stmts[] = $this->generateConstructor($contentType);

        foreach ($contentType->getFields() as $field) {
            $type = $this->getFieldType($field);
            if ($type == 'Link' || $type == 'Link[]') {
                $this->uses['link'] = true;
            }
            if ($type == 'ApiDateTime') {
                $this->uses['date'] = true;
            }

            $class->stmts[] = $this->generateGetter($field, $type);
            $class->stmts[] = $this->generateSetter($field, $type);

            if ($type == 'Link') {
                $class->stmts[] = $this->generateLinkResolverMethod($field);
            }
            if ($type == 'Link[]') {
                $class->stmts[] = $this->generateArrayLinkResolverMethod($field);
            }
        }

        return $class;
    }

    /**
     * Generates a class constructor method.
     *
     * @param ContentType $contentType
     *
     * @return ClassMethod
     */
    private function generateConstructor(ContentType $contentType): ClassMethod
    {
        return new ClassMethod(
            '__construct',
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PUBLIC,
                'stmts' => [
                    new Node\Expr\StaticCall(
                        new Node\Name('parent'),
                        '__construct',
                        [
                            new Node\Arg(new Node\Scalar\String_($contentType->getId())),
                        ]
                    ),
                ],
            ],
            ['comments' => [
                new Comment(\sprintf(
                    '/**
                    * %s constructor.
                    */',
                   $this->convertToStudlyCaps($contentType->getId())
                )),
            ]]
        );
    }

    /**
     * Generates a field getter method.
     *
     * @param FieldInterface $field
     * @param string         $type
     *
     * @return ClassMethod
     */
    private function generateGetter(FieldInterface $field, string $type): ClassMethod
    {
        return new ClassMethod(
            'get'.$this->convertToStudlyCaps($field->getId()),
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PUBLIC,
                'stmts' => [
                    new Node\Stmt\Return_(
                        new Node\Expr\MethodCall(
                            new Node\Expr\Variable('this'),
                            'getField',
                            [
                                new Node\Arg(new Node\Scalar\String_($field->getId())),
                                new Node\Arg(new Node\Expr\Variable('locale')),
                            ]
                        )
                    ),
                ],
                'params' => [
                    new Node\Param('locale', new Node\Scalar\String_($this->defaultLocale), 'string'),
                ],
            ],
            [
                'comments' => [
                    new Comment(\sprintf(
                        '
/**
                         * Returns the "%s" field.
                         *
                         * @param string $locale
                         *
                         * @return %s|null
                         */',
                         $field->getId(),
                         $type
                    )),
                ],
            ]
        );
    }

    /**
     * Generates a field setter method.
     *
     * @param FieldInterface $field
     * @param string         $type
     *
     * @return ClassMethod
     */
    private function generateSetter(FieldInterface $field, string $type): ClassMethod
    {
        $methodType = $type == 'mixed'
            ? null
            : (\strpos($type, '[]') !== false ? 'array' : $type);

        return new ClassMethod(
            'set'.$this->convertToStudlyCaps($field->getId()),
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PUBLIC,
                'stmts' => [
                    new Node\Stmt\Return_(
                        new Node\Expr\MethodCall(
                            new Node\Expr\Variable('this'),
                            'setField',
                            [
                                new Node\Arg(new Node\Scalar\String_($field->getId())),
                                new Node\Arg(new Node\Expr\Variable('locale')),
                                new Node\Arg(new Node\Expr\Variable('value')),
                            ]
                        )
                    ),
                ],
                'params' => [
                    new Node\Param('locale', new Node\Scalar\String_($this->defaultLocale), 'string'),
                    new Node\Param('value', new Node\Expr\ConstFetch(new Node\Name('null')), $methodType),
                ],
            ],
            [
                'comments' => [
                    new Comment(\sprintf(
                        '
/**
                         * Sets the "%s" field.
                         *
                         * @param %s $locale
                         * @param %s|null $value
                         *
                         * @return static
                         */',
                         $field->getId(),
                         \str_pad('string', \strlen($type.'|null'), ' ', \STR_PAD_RIGHT),
                         $type
                    )),
                ],
            ]
        );
    }

    /**
     * @param LinkField $field
     *
     * @return ClassMethod
     */
    private function generateLinkResolverMethod(LinkField $field): ClassMethod
    {
        $returnType = 'Asset';
        $usesAsset = true;
        $usesResourceInterface = false;

        if ($field->getLinkType() == 'Entry') {
            $returnType = 'ResourceInterface';
            $usesAsset = false;
            $usesResourceInterface = true;

            foreach ($field->getValidations() as $validation) {
                if ($validation instanceof LinkContentTypeValidation) {
                    $usesResourceInterface = false;
                    $returnType = \implode('|', \array_map(function (string $contentType) {
                        return $this->convertToStudlyCaps($contentType);
                    }, $validation->getContentTypes()));

                    break;
                }
            }
        }

        if ($usesAsset) {
            $this->uses['asset'] = true;
        }
        if ($usesResourceInterface) {
            $this->uses['resource_interface'] = true;
        }

        return new ClassMethod(
            'resolve'.$this->convertToStudlyCaps($field->getId()).'Link',
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PUBLIC,
                'stmts' => [
                    new Node\Stmt\Return_(
                        new Node\Expr\MethodCall(
                            new Node\Expr\PropertyFetch(new Node\Expr\Variable('this'), 'proxy'),
                            'resolveLink',
                            [
                                new Node\Expr\MethodCall(
                                    new Node\Expr\Variable('this'),
                                    'getField',
                                    [
                                        new Node\Arg(new Node\Scalar\String_($field->getId())),
                                        new Node\Arg(new Node\Expr\Variable('locale')),
                                    ]
                                ),
                            ]
                        )
                    ),
                ],
                'params' => [
                    new Node\Param('locale', new Node\Scalar\String_($this->defaultLocale), 'string'),
                ],
            ],
            [
                'comments' => [
                    new Comment(\sprintf(
                        '
/**
                         * Returns the resolved "%s" link.
                         *
                         * @param string $locale
                         *
                         * @return %s
                         */',
                         $field->getId(),
                         $returnType
                    )),
                ],
            ]
        );
    }

    /**
     * @param ArrayField $field
     *
     * @return ClassMethod
     */
    private function generateArrayLinkResolverMethod(ArrayField $field): ClassMethod
    {
        $returnTypes = ['Asset'];
        $usesAsset = true;
        $usesResourceInterface = false;

        if ($field->getItemsLinkType() == 'Entry') {
            $returnTypes = ['ResourceInterface'];
            $usesAsset = false;
            $usesResourceInterface = true;

            foreach ($field->getItemsValidations() as $validation) {
                if ($validation instanceof LinkContentTypeValidation) {
                    $usesResourceInterface = false;
                    $returnTypes = array_map(function (string $contentType) {
                        return $this->convertToStudlyCaps($contentType);
                    }, $validation->getContentTypes());

                    break;
                }
            }
        }

        if ($usesAsset) {
            $this->uses['asset'] = true;
        }
        if ($usesResourceInterface) {
            $this->uses['resource_interface'] = true;
        }

        return new ClassMethod(
            'resolve'.$this->convertToStudlyCaps($field->getId()).'Links',
            [
                'flags' => Node\Stmt\Class_::MODIFIER_PUBLIC,
                'stmts' => [
                    new Node\Stmt\Return_(
                        new Node\Expr\FuncCall(
                            new Node\Name('array_map'),
                            [
                                new Node\Arg(
                                    new Node\Expr\Closure([
                                        'params' => [
                                            new Node\Param('link', null, 'Link'),
                                        ],
                                        'stmts' => [
                                            new Node\Stmt\Return_(
                                                new Node\Expr\MethodCall(
                                                    new Node\Expr\PropertyFetch(new Node\Expr\Variable('this'), 'proxy'),
                                                    'resolveLink',
                                                    [new Node\Expr\Variable('link')]
                                                )
                                            ),
                                        ],
                                    ])
                                ),
                                new Node\Arg(
                                    new Node\Expr\Cast\Array_(
                                        new Node\Expr\MethodCall(
                                            new Node\Expr\Variable('this'),
                                            'getField',
                                            [
                                                new Node\Arg(new Node\Scalar\String_($field->getId())),
                                                new Node\Arg(new Node\Expr\Variable('locale')),
                                            ]
                                        )
                                    )
                                ),
                            ]
                        )
                    ),
                ],
                'params' => [
                    new Node\Param('locale', new Node\Scalar\String_($this->defaultLocale), 'string'),
                ],
            ],
            [
                'comments' => [
                    new Comment(\sprintf(
                        '
/**
                         * Returns an array of resolved "%s" links.
                         *
                         * @param string $locale
                         *
                         * @return %s[]
                         */',
                         $field->getId(),
                         \count($returnTypes) > 1 ? '('.\implode('|', $returnTypes).')' : $returnTypes[0]
                    )),
                ],
            ]
        );
    }
}
